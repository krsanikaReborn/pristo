<?php

namespace Pristo\FrontBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\Query\ResultSetMapping;


/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface
{
    
    public function loadUserByUsername($username) {
         
        $query = $this->createQueryBuilder('u')
                ->where('u.username = :username')
                ->andWhere('u.isEnabled = 1')
                ->setParameter('username', $username)                
                ->getQuery();
        try{
            $user = $query->getSingleResult();

        }  catch (\NoResultException $e){
            throw new UsernameNotFoundException(
                    sprintf('Unable to find an active admin PristoFrontBundle:User object identified by "%s".', $name),
                    null, 0, $e);
        }
                
        return $user;
        
//        return $this->findOneBy(array('name' => $username));
    }
        

    public function refreshUser(UserInterface $user) {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', $class));
        }              
        return $this->loadUserByUsername($user->getUsername());
    }

    public function supportsClass($class) {
        return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
    
    }
    
    
    public function findForAdmins($start, $limit, $order, $asc){
        var_dump($start, $limit);
        $qb = $this->createQueryBuilder("u")            
    //            ->select("COUNT(q.id) as qnaCount, u")
    //            ->leftJoin("PristoAdminBundle:Qna", "q", "WITH", "u.id = q.userId")
                ->orderBy("u.".$order, $asc)
    //            ->groupBy("q.userId")
                ->setFirstResult($start)
                ->setMaxResults($limit)
                ->getQuery();    
        
        try{
            $users = $qb->getResult();            
        }catch (\NoResultException $e){
              throw new UsernameNotFoundException(
                        sprintf('Unable to find an active admin PristoFrontBundle:User object identified by "%s".', $name),
                        null, 0, $e);        
        }        

        $ids = array();
        foreach($users as $user){
            $ids[] = $user->getId();
        }
        $qb2 = $this->getEntityManager()->getRepository("PristoAdminBundle:Qna")
                ->createQueryBuilder("q")
    //            ->from("", "q")
                ->where("q.status = 2")
                ->andWhere("q.userId IN(:ids)")
                ->setParameter("ids", array_values($ids))
                ->getQuery();
        $qnas = $qb2->getResult();

        foreach($users as &$user){
            $user->qnaCount = 0;
            foreach($qnas as $qna){    
                if($qna->getUserId() == $user->getId()){
                    $user->qnaCount++;
                }        
            }
        }


         return $users;
    }

    public function maxPage($max){
        $users = $this->findAll();        
        return floor(count($users) / $max);
    }
    
}
